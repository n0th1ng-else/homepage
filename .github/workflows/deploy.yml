name: Deploy

on:
  push:
    branches: [dev]

jobs:
  meta:
    runs-on: ubuntu-latest
    name: Fetch info and publications
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: dev

      - name: Set up node using nvm
        uses: dcodeIO/setup-node-nvm@v4

      - name: Restore cached node_modules
        uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Install Dependencies
        run: npm ci

      - name: Fetch meta info
        run: npm run meta
        env:
          COMMIT_HASH: ${GITHUB_SHA}
          GH_AUTHOR_LOGIN: ${{ secrets.GH_AUTHOR_LOGIN }}
          GH_AUTHOR_LINKED_IN: ${{ secrets.GH_AUTHOR_LINKED_IN }}
          GH_AUTHOR_TELEGRAM: ${{ secrets.GH_AUTHOR_TELEGRAM }}
          GH_AUTHOR_MEDIUM: ${{ secrets.GH_AUTHOR_MEDIUM }}
          GH_AUTHOR_HABR: ${{ secrets.GH_AUTHOR_HABR }}
          GH_AUTHOR_NPM: ${{ secrets.GH_AUTHOR_NPM }}
          GH_AUTHOR_TWITTER: ${{ secrets.GH_AUTHOR_TWITTER }}
          GH_AUTHOR_DEVTO: ${{ secrets.GH_AUTHOR_DEVTO }}

      - name: Store meta info
        uses: actions/upload-artifact@v1
        with:
          name: meta
          path: meta

  build:
    runs-on: ubuntu-latest
    name: Build bundles
    needs: meta
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: dev

      - name: Set up node using nvm
        uses: dcodeIO/setup-node-nvm@v4

      - name: Restore cached node_modules
        uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Install Dependencies
        run: npm ci

      - name: Download meta info
        uses: actions/download-artifact@v1
        with:
          name: meta

      - name: Validate the project
        run: npm run validate

      - name: Build project
        run: npm run build
        env:
          COMMIT_HASH: ${GITHUB_SHA}
          GH_AUTHOR_LOGIN: ${{ secrets.GH_AUTHOR_LOGIN }}
          GH_AUTHOR_LINKED_IN: ${{ secrets.GH_AUTHOR_LINKED_IN }}
          GH_AUTHOR_TELEGRAM: ${{ secrets.GH_AUTHOR_TELEGRAM }}
          GH_AUTHOR_MEDIUM: ${{ secrets.GH_AUTHOR_MEDIUM }}
          GH_AUTHOR_HABR: ${{ secrets.GH_AUTHOR_HABR }}
          GH_AUTHOR_NPM: ${{ secrets.GH_AUTHOR_NPM }}
          GH_AUTHOR_TWITTER: ${{ secrets.GH_AUTHOR_TWITTER }}
          GH_AUTHOR_DEVTO: ${{ secrets.GH_AUTHOR_DEVTO }}

      - name: Archive production artifacts
        uses: actions/upload-artifact@v1
        with:
          name: app-bundle
          path: public

  deploy:
    runs-on: ubuntu-latest
    env:
      GH_RELEASE_BRANCH: release-branch
    name: Open PR with new version
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: master

      - name: Set github username
        run: git config user.name ${{ secrets.GH_AUTHOR_LOGIN }}

      - name: Set github email
        run: git config user.email ${{ secrets.GH_AUTHOR_EMAIL }}

      - name: Fetch git tree
        run: git fetch --all

      - name: Create release branch
        run: git checkout -b $GH_RELEASE_BRANCH

      - name: Download production artifacts
        uses: actions/download-artifact@v1
        with:
          name: app-bundle

      - name: Move files into the root dir
        run: mv ./app-bundle/* . && rm -rf ./app-bundle

      - name: Add files into version control
        run: git add .

      - name: Commit release files
        run: git commit -m "Deliver new application release"

      - name: Push changes into branch
        run: git push --force --set-upstream origin $GH_RELEASE_BRANCH

      - name: Create Pull-Request into dist branch
        uses: repo-sync/pull-request@v2
        with:
          source_branch: ${{ env.GH_RELEASE_BRANCH }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          pr_reviewer: ${{ secrets.GH_AUTHOR_LOGIN }}
          pr_assignee: ${{ secrets.GH_AUTHOR_LOGIN }}
