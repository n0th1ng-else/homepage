name: Service Release

on:
  push:
    branches: [dev]

jobs:
  version:
    runs-on: ubuntu-latest
    name: Push new version
    outputs:
      version: ${{ steps.getversion.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Read NodeJS version from .nvmrc
        id: node-version
        uses: juliangruber/read-file-action@v1
        with:
          path: ./.nvmrc
          trim: true

      - name: Setup NodeJS using the obtained nvm version
        uses: actions/setup-node@v2
        with:
          node-version: ${{ steps.node-version.outputs.content }}

      - name: Restore cached node_modules
        uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/package-lock.json') }}

      - name: Install Dependencies
        run: npm ci

      - name: Publish new version
        run: npm run version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Read VERSION file
        id: getversion
        run: echo "::set-output name=version::$(cat .VERSION)"

  docker:
    runs-on: ubuntu-latest
    name: Push docker image
    needs: version
    steps:
      - name: App version
        run: echo Picked the app version ${{ needs.version.outputs.version }}-${{ github.sha }}

      - name: Checkout
        uses: actions/checkout@v2.3.4

      - name: Read NodeJS version from .nvmrc
        id: node-version
        uses: juliangruber/read-file-action@v1
        with:
          path: ./.nvmrc
          trim: true

      - name: Setup NodeJS using the obtained nvm version
        uses: actions/setup-node@v2
        with:
          node-version: ${{ steps.node-version.outputs.content }}

      - name: Publish to Registry
        uses: docker/build-push-action@v1
        with:
          registry: docker.pkg.github.com
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          repository: '${{ github.actor }}/n0th1ng-else.github.io/n0th1ng-else-blog'
          tag_with_sha: true
          build_args: APP_VERSION=${{ needs.version.outputs.version }},COMMIT_HASH=${{ env.APP_VERSION }},SELF_URL=${{ secrets.SELF_URL }},GH_AUTHOR_LOGIN=${{ secrets.GH_AUTHOR_LOGIN }},GH_AUTHOR_LINKED_IN=${{ secrets.GH_AUTHOR_LINKED_IN }},GH_AUTHOR_TELEGRAM=${{ secrets.GH_AUTHOR_TELEGRAM }},GH_AUTHOR_MEDIUM=${{ secrets.GH_AUTHOR_MEDIUM }},GH_AUTHOR_HABR=${{ secrets.GH_AUTHOR_HABR }},GH_AUTHOR_NPM=${{ secrets.GH_AUTHOR_NPM }},GH_AUTHOR_TWITTER=${{ secrets.GH_AUTHOR_TWITTER }},GH_AUTHOR_DEVTO=${{ secrets.GH_AUTHOR_DEVTO }}

  production:
    runs-on: ubuntu-latest
    name: Deploy to production
    needs: version
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Read NodeJS version from .nvmrc
        id: node-version
        uses: juliangruber/read-file-action@v1
        with:
          path: ./.nvmrc
          trim: true

      - name: Setup NodeJS using the obtained nvm version
        uses: actions/setup-node@v2
        with:
          node-version: ${{ steps.node-version.outputs.content }}

      - name: Install Railway CLI
        run: npm i -g @railway/cli

      - name: Set the version to sandbox
        run: railway variables set COMMIT_HASH=${{ env.COMMIT_HASH }} APP_VERSION=${{ env.APP_VERSION }}
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_PRODUCTION_TOKEN }}
          COMMIT_HASH: ${{ github.sha }}
          APP_VERSION: ${{ needs.version.outputs.version }}

      - name: Deploy Dockerfile to sandbox
        run: railway up
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_PRODUCTION_TOKEN }}
