name: Service Release

on:
  push:
    branches: [dev]

jobs:
  version:
    runs-on: ubuntu-latest
    name: Push new version
    outputs:
      version: ${{ steps.getversion.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Read NodeJS version from .nvmrc
        id: node-version
        uses: juliangruber/read-file-action@v1
        with:
          path: ./.nvmrc
          trim: true

      - name: Setup NodeJS using the obtained nvm version
        uses: actions/setup-node@v2
        with:
          node-version: ${{ steps.node-version.outputs.content }}

      - name: Restore cached node_modules
        uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/package-lock.json') }}

      - name: Install Dependencies
        run: npm ci

      - name: Publish new version
        run: npm run version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Read VERSION file
        id: getversion
        run: echo "::set-output name=version::$(cat .VERSION)"

  docker:
    runs-on: ubuntu-latest
    name: Push docker image
    needs: version
    steps:
      - name: App version
        run: echo Picked the app version ${{ needs.version.outputs.version }}-${{ github.sha }}

      - name: Checkout
        uses: actions/checkout@v2.3.4

      - name: Read NodeJS version from .nvmrc
        id: node-version
        uses: juliangruber/read-file-action@v1
        with:
          path: ./.nvmrc
          trim: true

      - name: Setup NodeJS using the obtained nvm version
        uses: actions/setup-node@v2
        with:
          node-version: ${{ steps.node-version.outputs.content }}

      - name: Publish to Registry
        uses: docker/build-push-action@v1
        with:
          registry: docker.pkg.github.com
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          repository: '${{ github.actor }}/n0th1ng-else.github.io/n0th1ng-else-blog'
          tag_with_sha: true
          build_args: APP_VERSION=${{ needs.version.outputs.version }},COMMIT_HASH=${{ env.APP_VERSION }},GH_AUTHOR_LOGIN=${{ secrets.GH_AUTHOR_LOGIN }},GH_AUTHOR_LINKED_IN=${{ secrets.GH_AUTHOR_LINKED_IN }},GH_AUTHOR_TELEGRAM=${{ secrets.GH_AUTHOR_TELEGRAM }},GH_AUTHOR_MEDIUM=${{ secrets.GH_AUTHOR_MEDIUM }},GH_AUTHOR_HABR=${{ secrets.GH_AUTHOR_HABR }},GH_AUTHOR_NPM=${{ secrets.GH_AUTHOR_NPM }},GH_AUTHOR_TWITTER=${{ secrets.GH_AUTHOR_TWITTER }},GH_AUTHOR_DEVTO=${{ secrets.GH_AUTHOR_DEVTO }}

  heroku:
    runs-on: ubuntu-latest
    name: Deploy to Heroku
    needs: version
    steps:
      - name: App version
        run: echo Picked the app version ${{ needs.version.outputs.version }}-${{ github.sha }}

      - name: Checkout
        uses: actions/checkout@v2.3.4

      - name: Read NodeJS version from .nvmrc
        id: node-version
        uses: juliangruber/read-file-action@v1
        with:
          path: ./.nvmrc
          trim: true

      - name: Setup NodeJS using the obtained nvm version
        uses: actions/setup-node@v2
        with:
          node-version: ${{ steps.node-version.outputs.content }}

      - name: Docker login
        run: echo ${{ env.D_PWD }} | docker login --username=${{ env.D_LOGIN }} ${{ env.D_REGISTRY }} --password-stdin
        env:
          D_LOGIN: ${{ secrets.HEROKU_EMAIL }}
          D_PWD: ${{ secrets.HEROKU_API_KEY }}
          D_REGISTRY: registry.heroku.com

      - name: Push docker image
        run: |
          heroku container:${{ env.D_ACTION }} web --app ${{ env.D_NAME }} --arg \
          APP_VERSION=${{ needs.version.outputs.version }},\
          COMMIT_HASH=${{ env.D_VERSION }},\
          GH_AUTHOR_LOGIN=${{ secrets.GH_AUTHOR_LOGIN }},\
          GH_AUTHOR_LINKED_IN=${{ secrets.GH_AUTHOR_LINKED_IN }},\
          GH_AUTHOR_TELEGRAM=${{ secrets.GH_AUTHOR_TELEGRAM }},\
          GH_AUTHOR_MEDIUM=${{ secrets.GH_AUTHOR_MEDIUM }},\
          GH_AUTHOR_HABR=${{ secrets.GH_AUTHOR_HABR }},\
          GH_AUTHOR_NPM=${{ secrets.GH_AUTHOR_NPM }},\
          GH_AUTHOR_TWITTER=${{ secrets.GH_AUTHOR_TWITTER }},\
          GH_AUTHOR_DEVTO=${{ secrets.GH_AUTHOR_DEVTO }}
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
          D_ACTION: push
          D_NAME: ${{ secrets.HEROKU_APP_NAME }}
          D_VERSION: ${{ github.sha }}

      - name: Release docker image
        run: heroku container:${{ env.D_ACTION }} web --app ${{ env.D_NAME }}
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
          D_ACTION: release
          D_NAME: ${{ secrets.HEROKU_APP_NAME }}

      - name: Sleep for around 1 minute
        run: sleep 60s
        shell: bash

      - name: Toggle healthcheck handler
        uses: fjogeleit/http-request-action@master
        with:
          url: https://${{ secrets.HEROKU_APP_NAME }}.herokuapp.com/status
          method: GET
