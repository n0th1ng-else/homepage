{
  "version": 3,
  "file": "main.css",
  "sources": [
    "App.svelte",
    "BasicInfo.svelte",
    "ContactItem.svelte",
    "Link.svelte",
    "LinkItem.svelte",
    "Articles.svelte",
    "Contacts.svelte"
  ],
  "sourcesContent": [
    "<script lang=\"ts\">import Tab, { Icon, Label } from '@smui/tab/styled';\nimport TabBar from '@smui/tab-bar/styled';\n;\nimport { push } from 'svelte-spa-router';\nimport { wrap } from 'svelte-spa-router/wrap';\nimport Router from 'svelte-spa-router';\nimport BlankComponent from '../routes/BlankComponent.svelte';\nimport News from '../routes/News.svelte';\nimport Contacts from '../routes/Contacts.svelte';\nimport Projects from '../routes/Projects.svelte';\nimport Articles from '../routes/Articles.svelte';\nimport Packages from '../routes/Packages.svelte';\nimport BasicInfo from './BasicInfo.svelte';\nimport { RoutePath, toPath } from '../routes';\nimport { getProfile } from '../helpers/global';\nimport { tabs, getTabById } from '../data/tabs';\nimport { sendPageView } from '../helpers/analytics';\nconst routes = {\n    [toPath(RoutePath.News)]: wrap({\n        component: News,\n        userData: { path: RoutePath.News }\n    }),\n    [toPath(RoutePath.Contacts)]: wrap({\n        component: Contacts,\n        userData: { path: RoutePath.Contacts }\n    }),\n    [toPath(RoutePath.Projects)]: wrap({\n        component: Projects,\n        userData: { path: RoutePath.Projects }\n    }),\n    [toPath(RoutePath.Articles)]: wrap({\n        component: Articles,\n        userData: { path: RoutePath.Articles }\n    }),\n    [toPath(RoutePath.Packages)]: wrap({\n        component: Packages,\n        userData: { path: RoutePath.Packages }\n    }),\n    [toPath()]: wrap({\n        component: BlankComponent,\n        userData: { path: RoutePath.Articles },\n        conditions: () => push(toPath(RoutePath.Articles)).then(() => true)\n    }),\n    [toPath(RoutePath.Other)]: wrap({\n        component: BlankComponent,\n        userData: { path: RoutePath.Articles },\n        conditions: () => push(toPath(RoutePath.Articles)).then(() => true)\n    })\n};\nlet activeTab = getTabById();\nlet tab;\nconst profile = getProfile();\nconst routeLoaded = event => {\n    const tabId = event.detail.userData.path;\n    activeTab = getTabById(tabId);\n    sendPageView();\n};\nconst selectTab = () => setTimeout(() => {\n    const tabId = activeTab.id;\n    push(toPath(tabId));\n});\n</script>\n\n<div class=\"app-page\">\n\t<div class=\"app-block\">\n\t\t<div class=\"with-space\">\n\t\t\t<BasicInfo profile=\"{profile}\" />\n\t\t</div>\n\t\t<div class=\"with-space\">\n\t\t\t<TabBar tabs=\"{tabs}\" bind:active=\"{activeTab}\" let:tab>\n\t\t\t\t<Tab tab=\"{tab}\" minWidth on:click=\"{selectTab}\">\n\t\t\t\t\t{#if tab.icon}\n\t\t\t\t\t\t<Icon class=\"material-icons\">{tab.icon}</Icon>\n\t\t\t\t\t{/if}\n\t\t\t\t\t<Label>{tab.label}</Label>\n\t\t\t\t</Tab>\n\t\t\t</TabBar>\n\t\t</div>\n\t</div>\n\t<div class=\"app-block\">\n\t\t<Router routes=\"{routes}\" on:routeLoaded=\"{routeLoaded}\" />\n\t</div>\n</div>\n\n<style lang=\"scss\">.app-page {\n  max-width: 52rem;\n  margin: 2rem auto;\n}\n\n.app-block {\n  margin: 0 1rem;\n}\n\n.with-space {\n  margin-bottom: 0.5rem;\n}</style>\n",
    "<script lang=\"ts\">import Tags from './Tags.svelte';\nimport Link from './Link.svelte';\n;\nimport { labels } from '../labels';\nimport { tags } from '../data/tags';\nexport let profile = {\n    author: null,\n    date: null,\n    description: null,\n    image: null,\n    logo: null,\n    publisher: null,\n    title: null,\n    url: null\n};\nconst getImage = (data) => {\n    if (!data.image) {\n        return;\n    }\n    return data.image;\n};\n</script>\n\n<div class=\"flex-container\">\n\t<div class=\"with-padding show-desktop-only\">\n\t\t<img src=\"{getImage(profile)}\" alt=\"Sergey's face\" class=\"author-avatar author-avatar--big\" />\n\t</div>\n\t<div class=\"with-padding\">\n\t\t<div class=\"flex-container aligned-with-tags\">\n\t\t\t<div class=\"with-padding hide-desktop-only\">\n\t\t\t\t<img\n\t\t\t\t\tsrc=\"{getImage(profile)}\"\n\t\t\t\t\talt=\"Sergey's face\"\n\t\t\t\t\tclass=\"author-avatar author-avatar--small\"\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<div><span class=\"mdc-typography--headline4\">{labels.name}</span></div>\n\t\t\t\t<div>\n\t\t\t\t\t<span class=\"mdc-typography--subtitle1\">\n\t\t\t\t\t\tI am currently working at\n\t\t\t\t\t\t<Link href=\"https://catawiki.com\" decorate>Catawiki.com</Link>\n\t\t\t\t\t</span>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"aligned-with-tags\">\n\t\t\t<div class=\"mdc-typography--subtitle1\">\n\t\t\t\tMy specialization is everything related to\n\t\t\t\t<b>Frontend</b>\n\t\t\t\tand\n\t\t\t\t<b>NodeJS</b>\n\t\t\t\tdevelopment\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"aligned-with-tags\">\n\t\t\t<div class=\"mdc-typography--subtitle2\">\n\t\t\t\tThese tags are very small piece of Javascript technologies I have experience with:\n\t\t\t</div>\n\t\t</div>\n\t\t<div>\n\t\t\t<Tags items=\"{tags}\" />\n\t\t</div>\n\t</div>\n</div>\n\n<style lang=\"scss\">.author-avatar {\n  object-fit: cover;\n  border-radius: 50%;\n}\n.author-avatar--big {\n  height: 13rem;\n}\n.author-avatar--small {\n  height: 4rem;\n  margin-right: 1rem;\n}\n\n.with-padding {\n  margin: 0.25rem;\n}\n\n.aligned-with-tags {\n  margin-left: 0.5rem;\n}</style>\n",
    "<script lang=\"ts\">import Card, { ActionButtons, ActionIcons, Actions as CardActions, Content as CardContent } from '@smui/card/styled';\nimport IconButton from '@smui/icon-button/styled';\nimport Dialog, { Actions, Content, Title } from '@smui/dialog/styled';\nimport Button, { Label } from '@smui/button/styled';\nimport { ContactType } from '../data/contact';\nimport { copyToClipboard } from '../helpers/clipboard';\nimport { getEmailLink, getGMapsLink } from '../helpers/links';\nimport { Logger } from '../helpers/log';\nconst log = new Logger('ContactItem');\nexport let title = '';\nexport let sub = '';\nexport let icon = '';\nexport let image = '';\nexport let link = '';\nexport let type = ContactType.Url;\nlet open = false;\nlet copyError = null;\nconst openLink = (contactType, title, url) => {\n    const enrichedUrl = contactType === ContactType.Location ? getGMapsLink(title) : url;\n    if (!enrichedUrl) {\n        return;\n    }\n    const fullUrl = contactType === ContactType.Email ? getEmailLink(enrichedUrl) : enrichedUrl;\n    window.open(fullUrl, '_blank');\n};\nconst copyLink = (url) => {\n    if (!url) {\n        return;\n    }\n    copyToClipboard(url)\n        .then(() => {\n        copyError = null;\n        open = true;\n    })\n        .catch(err => {\n        log.error('Unable to copy to clipboard', err);\n        copyError = err;\n        open = true;\n    });\n};\nconst closeDialog = () => {\n    copyError = null;\n    open = false;\n};\n</script>\n\n<div class=\"contact-container\">\n\t<div class=\"contact-padded\">\n\t\t<Card>\n\t\t\t<CardContent>\n\t\t\t\t{#if icon}<span class=\"material-icons contact-icon\">{icon}</span>{/if}\n\t\t\t\t{#if image}<img src=\"{image}\" class=\"contact-image\" alt=\"{title}\" />{/if}\n\t\t\t\t<span class=\"title-size\">{title}</span>\n\t\t\t\t<sup class=\"sub-size mdc-typography--overline\">{sub}</sup>\n\t\t\t</CardContent>\n\t\t\t<CardActions>\n\t\t\t\t<ActionButtons>\n\t\t\t\t\t<Button on:click=\"{() => openLink(type, title, link)}\">\n\t\t\t\t\t\t<Label>\n\t\t\t\t\t\t\t{#if type === ContactType.Email}\n\t\t\t\t\t\t\t\tWrite an email\n\t\t\t\t\t\t\t{:else if type === ContactType.Location}Show on maps{:else}Open{/if}\n\t\t\t\t\t\t</Label>\n\t\t\t\t\t</Button>\n\t\t\t\t</ActionButtons>\n\t\t\t\t{#if link || type === ContactType.Location}\n\t\t\t\t\t<ActionIcons>\n\t\t\t\t\t\t<IconButton\n\t\t\t\t\t\t\tclass=\"material-icons\"\n\t\t\t\t\t\t\ton:click=\"{() => copyLink(link || title)}\"\n\t\t\t\t\t\t\ttitle=\"Copy link\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tcontent_copy\n\t\t\t\t\t\t</IconButton>\n\t\t\t\t\t</ActionIcons>\n\t\t\t\t{/if}\n\t\t\t</CardActions>\n\t\t</Card>\n\n\t\t<Dialog bind:open aria-labelledby=\"dialog-title\" aria-describedby=\"dialog-content\">\n\t\t\t<Title id=\"dialog-title\">Copied to the clipboard</Title>\n\t\t\t<Content id=\"dialog-content\">\n\t\t\t\t{#if copyError}\n\t\t\t\t\tUgh! Unable to copy the link...\n\t\t\t\t{:else if type === ContactType.Email}\n\t\t\t\t\tThe email\n\t\t\t\t\t<b>{link || title}</b>\n\t\t\t\t\thas been copied to the clipboard\n\t\t\t\t{:else if type === ContactType.Location}\n\t\t\t\t\tThe location\n\t\t\t\t\t<b>{link || title}</b>\n\t\t\t\t\thas been copied to the clipboard\n\t\t\t\t{:else}The link <b>{link || title}</b> has been copied to the clipboard{/if}\n\t\t\t</Content>\n\t\t\t<Actions>\n\t\t\t\t<Button on:click=\"{() => closeDialog()}\">\n\t\t\t\t\t<Label>OK</Label>\n\t\t\t\t</Button>\n\t\t\t</Actions>\n\t\t</Dialog>\n\t</div>\n</div>\n\n<style lang=\"scss\">.contact-icon {\n  font-size: 1.25rem;\n  position: relative;\n  top: 0.125rem;\n}\n\n.contact-image {\n  max-height: 1rem;\n  filter: brightness(0%);\n  margin-right: 0.25rem;\n}\n\n.title-size {\n  font-size: 1.5rem;\n}\n\n.contact-padded {\n  margin: 0.5rem;\n}\n\n.contact-container {\n  flex: 1 0 100%;\n}\n\n@media (min-width: 52rem) {\n  .contact-container {\n    flex: 0 0 25rem;\n  }\n}</style>\n",
    "<script lang=\"ts\">export let decorate = false;\nexport let href;\n</script>\n\n<a href=\"{href}\" class:link--decorated=\"{decorate}\" target=\"_blank\" rel=\"noreferrer noopener\">\n\t<slot />\n</a>\n\n<style lang=\"scss\">.link--decorated {\n  text-decoration-line: underline;\n}</style>\n",
    "<script lang=\"ts\">import Paper, { Title, Content } from '@smui/paper/styled';\nimport Link from './Link.svelte';\n;\nimport { onMount, onDestroy } from 'svelte';\nimport { getRelativeDate } from '../helpers/date';\nexport let publication = {\n    service: '',\n    url: '',\n    lang: '',\n    fullUrl: '',\n    meta: {\n        author: null,\n        date: null,\n        description: null,\n        image: null,\n        logo: null,\n        publisher: null,\n        title: null,\n        url: null\n    }\n};\nlet pubDate;\nlet updater = 0;\nconst setDate = () => {\n    pubDate = getRelativeDate(publication.meta.date);\n};\nconst getImage = (data) => {\n    if (!data.meta.image) {\n        return;\n    }\n    return data.meta.image;\n};\nonMount(() => {\n    setDate();\n    updater = window.setInterval(() => setDate(), 1000);\n});\nonDestroy(() => {\n    if (!updater) {\n        return;\n    }\n    window.clearInterval(updater);\n});\n</script>\n\n<div class=\"article__content\">\n\t<Paper elevation=\"3\">\n\t\t<Title>\n\t\t\t<div class=\"flex-container header__container\">\n\t\t\t\t<div class=\"header__title\">\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<Link href=\"{publication.fullUrl}\">\n\t\t\t\t\t\t\t<span class=\"mdc-typography--headline5\">{publication.meta.title}</span>\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"greyed hide-desktop-only mdc-typography--caption\"><span>{pubDate}</span></div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"header__issue-date greyed show-desktop-only\"><span>{pubDate}</span></div>\n\t\t\t</div>\n\t\t</Title>\n\t\t<Content>\n\t\t\t<div class=\"flex-container\">\n\t\t\t\t<div>\n\t\t\t\t\t<img class=\"article__image\" src=\"{getImage(publication)}\" alt=\"publication logo\" />\n\t\t\t\t</div>\n\t\t\t\t<div class=\"article__description\">\n\t\t\t\t\t<Link href=\"{publication.fullUrl}\">\n\t\t\t\t\t\t<span class=\"mdc-typography--body1\">{publication.meta.description}</span>\n\t\t\t\t\t\t<i class=\"article__show-more material-icons\">launch</i>\n\t\t\t\t\t</Link>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</Content>\n\t</Paper>\n</div>\n\n<style lang=\"scss\">.header__container {\n  justify-content: space-between;\n}\n.header__container .header__issue-date {\n  flex: 1 0 auto;\n  font-size: 1rem;\n}\n.header__container .header__title {\n  flex: 1 1 100%;\n}\n\n.article__content {\n  margin: 0.5rem 0.5rem 2rem 0.5rem;\n}\n.article__content .article__image {\n  width: 7rem;\n}\n.article__content .article__description {\n  margin-left: 0.5rem;\n  position: relative;\n}\n.article__content .article__show-more {\n  position: absolute;\n  font-size: 1rem;\n  margin: 0.25rem 0 0 0.25rem;\n}</style>\n",
    "<script lang=\"ts\">;\nimport Switch from '@smui/switch/styled';\nimport FormField from '@smui/form-field/styled';\nimport LinkItem from '../components/LinkItem.svelte';\nimport { RoutePath } from '.';\nimport { getSortedList } from '../helpers/sort';\nimport { getPageTitle } from '../labels';\nimport { getArticles } from '../helpers/global';\nimport { Language } from '../data/language';\nlet selected = false;\nconst publications = getArticles();\nconst allPublications = getSortedList(publications);\nconst enPubs = getSortedList(publications.filter(pub => pub.lang === Language.En));\nconst getPublications = (isSelected) => isSelected ? [...allPublications] : [...enPubs];\nlet pubsToRender = getPublications(selected);\nconst updateList = () => {\n    pubsToRender = getPublications(selected);\n};\n</script>\n\n<svelte:head>\n\t<title>{getPageTitle(RoutePath.Articles)}</title>\n</svelte:head>\n\n<div>\n\t<div class=\"flex-container flex-right\">\n\t\t<div class=\"padded-switch\">\n\t\t\t<FormField align=\"end\">\n\t\t\t\t<Switch bind:checked=\"{selected}\" on:change=\"{updateList}\" />\n\t\t\t\t<span slot=\"label\" class=\"linked-with-field\">Show publications in Russian</span>\n\t\t\t</FormField>\n\t\t</div>\n\t</div>\n\t<div>\n\t\t{#each pubsToRender as pub (pub.fullUrl)}\n\t\t\t<LinkItem publication=\"{pub}\" />\n\t\t{/each}\n\t</div>\n</div>\n\n<style lang=\"scss\">.flex-right {\n  justify-content: flex-end;\n}\n\n.padded-switch {\n  margin: 1rem 0.5rem;\n}\n\n.linked-with-field {\n  cursor: pointer;\n}</style>\n",
    "<script lang=\"ts\">import ContactItem from '../components/ContactItem.svelte';\nimport { RoutePath } from '.';\nimport { getPageTitle } from '../labels';\nimport { getEmailContact, getGitHubContact, getHabrContact, getLocationContact, getMediumContact, getTwitterContact, getDevtoContact, getLinkedInContact } from '../helpers/contacts';\nconst email = getEmailContact();\nconst location = getLocationContact();\nconst twitter = getTwitterContact();\nconst medium = getMediumContact();\nconst github = getGitHubContact();\nconst habr = getHabrContact();\nconst devto = getDevtoContact();\nconst linkedIn = getLinkedInContact();\n</script>\n\n<svelte:head>\n\t<title>{getPageTitle(RoutePath.Contacts)}</title>\n</svelte:head>\n\n<div>\n\t<div>\n\t\t<div>\n\t\t\t<h2>Basic Info</h2>\n\t\t</div>\n\t\t<div class=\"contacts-container\">\n\t\t\t<ContactItem\n\t\t\t\ttitle=\"{location.title}\"\n\t\t\t\tsub=\"{location.sub}\"\n\t\t\t\ttype=\"{location.type}\"\n\t\t\t\ticon=\"{location.icon}\"\n\t\t\t/>\n\t\t\t<ContactItem\n\t\t\t\ttitle=\"{email.title}\"\n\t\t\t\tlink=\"{email.link}\"\n\t\t\t\ttype=\"{email.type}\"\n\t\t\t\ticon=\"{email.icon}\"\n\t\t\t/>\n\t\t</div>\n\t</div>\n\n\t<div>\n\t\t<div>\n\t\t\t<h2>Networks</h2>\n\t\t</div>\n\t\t<div class=\"contacts-container\">\n\t\t\t<ContactItem title=\"{github.title}\" link=\"{github.link}\" image=\"{github.image}\" />\n\t\t\t<ContactItem title=\"{devto.title}\" link=\"{devto.link}\" image=\"{devto.image}\" />\n\t\t\t<ContactItem title=\"{twitter.title}\" link=\"{twitter.link}\" image=\"{twitter.image}\" />\n\t\t\t<ContactItem title=\"{habr.title}\" link=\"{habr.link}\" image=\"{habr.image}\" />\n\t\t\t<ContactItem title=\"{linkedIn.title}\" link=\"{linkedIn.link}\" image=\"{linkedIn.image}\" />\n\t\t\t<ContactItem title=\"{medium.title}\" link=\"{medium.link}\" image=\"{medium.image}\" />\n\t\t</div>\n\t</div>\n</div>\n\n<style lang=\"scss\">.contacts-container {\n  max-width: 50rem;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n}</style>\n"
  ],
  "names": [],
  "mappings": "AAoFmB,SAAS,cAAC,CAAC,AAC5B,SAAS,CAAE,KAAK,CAChB,MAAM,CAAE,IAAI,CAAC,IAAI,AACnB,CAAC,AAED,UAAU,cAAC,CAAC,AACV,MAAM,CAAE,CAAC,CAAC,IAAI,AAChB,CAAC,AAED,WAAW,cAAC,CAAC,AACX,aAAa,CAAE,MAAM,AACvB,CAAC;AC7BkB,cAAc,eAAC,CAAC,AACjC,UAAU,CAAE,KAAK,CACjB,aAAa,CAAE,GAAG,AACpB,CAAC,AACD,mBAAmB,eAAC,CAAC,AACnB,MAAM,CAAE,KAAK,AACf,CAAC,AACD,qBAAqB,eAAC,CAAC,AACrB,MAAM,CAAE,IAAI,CACZ,YAAY,CAAE,IAAI,AACpB,CAAC,AAED,aAAa,eAAC,CAAC,AACb,MAAM,CAAE,OAAO,AACjB,CAAC,AAED,kBAAkB,eAAC,CAAC,AAClB,WAAW,CAAE,MAAM,AACrB,CAAC;ACmBkB,aAAa,cAAC,CAAC,AAChC,SAAS,CAAE,OAAO,CAClB,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,QAAQ,AACf,CAAC,AAED,cAAc,cAAC,CAAC,AACd,UAAU,CAAE,IAAI,CAChB,MAAM,CAAE,WAAW,EAAE,CAAC,CACtB,YAAY,CAAE,OAAO,AACvB,CAAC,AAED,WAAW,cAAC,CAAC,AACX,SAAS,CAAE,MAAM,AACnB,CAAC,AAED,eAAe,cAAC,CAAC,AACf,MAAM,CAAE,MAAM,AAChB,CAAC,AAED,kBAAkB,cAAC,CAAC,AAClB,IAAI,CAAE,CAAC,CAAC,CAAC,CAAC,IAAI,AAChB,CAAC,AAED,MAAM,AAAC,YAAY,KAAK,CAAC,AAAC,CAAC,AACzB,kBAAkB,cAAC,CAAC,AAClB,IAAI,CAAE,CAAC,CAAC,CAAC,CAAC,KAAK,AACjB,CAAC,AACH,CAAC;AC3HkB,gBAAgB,eAAC,CAAC,AACnC,oBAAoB,CAAE,SAAS,AACjC,CAAC;ACiEkB,kBAAkB,8BAAC,CAAC,AACrC,eAAe,CAAE,aAAa,AAChC,CAAC,AACD,iCAAkB,CAAC,mBAAmB,eAAC,CAAC,AACtC,IAAI,CAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CACd,SAAS,CAAE,IAAI,AACjB,CAAC,AACD,iCAAkB,CAAC,cAAc,eAAC,CAAC,AACjC,IAAI,CAAE,CAAC,CAAC,CAAC,CAAC,IAAI,AAChB,CAAC,AAED,iBAAiB,8BAAC,CAAC,AACjB,MAAM,CAAE,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,AACnC,CAAC,AACD,gCAAiB,CAAC,eAAe,eAAC,CAAC,AACjC,KAAK,CAAE,IAAI,AACb,CAAC,AACD,gCAAiB,CAAC,qBAAqB,eAAC,CAAC,AACvC,WAAW,CAAE,MAAM,CACnB,QAAQ,CAAE,QAAQ,AACpB,CAAC,AACD,gCAAiB,CAAC,mBAAmB,eAAC,CAAC,AACrC,QAAQ,CAAE,QAAQ,CAClB,SAAS,CAAE,IAAI,CACf,MAAM,CAAE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,AAC7B,CAAC;AC5DkB,WAAW,eAAC,CAAC,AAC9B,eAAe,CAAE,QAAQ,AAC3B,CAAC,AAED,cAAc,eAAC,CAAC,AACd,MAAM,CAAE,IAAI,CAAC,MAAM,AACrB,CAAC,AAED,kBAAkB,eAAC,CAAC,AAClB,MAAM,CAAE,OAAO,AACjB,CAAC;ACIkB,mBAAmB,eAAC,CAAC,AACtC,SAAS,CAAE,KAAK,CAChB,OAAO,CAAE,IAAI,CACb,SAAS,CAAE,IAAI,CACf,eAAe,CAAE,aAAa,AAChC,CAAC"
}